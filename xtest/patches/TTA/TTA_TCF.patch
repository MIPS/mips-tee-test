diff -ruN TTA_TCF/TTA_TCF/code_files/manifest.c TTA_TCF_patched/TTA_TCF/code_files/manifest.c
--- TTA_TCF/code_files/manifest.c	1970-01-01 01:00:00.000000000 +0100
+++ TTA_TCF_patched/code_files/manifest.c	2017-11-07 18:00:23.192290089 +0100
@@ -0,0 +1,59 @@
+/*
+ * Copyright (c) 2016-218, MIPS Tech, LLC and/or its affiliated group companies (“MIPS”).
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <trusty_app_manifest.h>
+#include <stddef.h>
+#include <tee_api_properties.h>
+#include <tee_api_types.h>
+
+#define TTA_TCF_UUID { 0x534D4152, 0x542D, 0x4353, \
+    { 0x4C, 0x54, 0x2D, 0x54, 0x41, 0x2D, 0x30, 0x31 } }
+
+tee_api_properties_t TEE_API_PROP_ATTRS tee_api_properties =
+{
+    { "gpd.ta.description", TA_PROP_TYPE_STR, "testing_trusted_core_framework_ta"},
+    { "gpd.ta.singleInstance", TA_PROP_TYPE_BOOL, &(const bool){1}},
+    { "gpd.ta.multiSession", TA_PROP_TYPE_BOOL, &(const bool){0}},
+    { "gpd.ta.instanceKeepAlive", TA_PROP_TYPE_BOOL, &(const bool){0}},
+    { "gpd.ta.dataSize", TA_PROP_TYPE_U32, &(const uint32_t){256000}},
+    { "gpd.ta.stackSize", TA_PROP_TYPE_U32, &(const uint32_t){4096}},
+    { "smc.ta.testbooltrue", TA_PROP_TYPE_BOOL, &(const bool){1}},
+    { "smc.ta.testu32", TA_PROP_TYPE_U32, &(const uint32_t){48059}},
+    { "smc.ta.teststring", TA_PROP_TYPE_STR, "this is a test string"},
+    { "smc.ta.testbinaryblock", TA_PROP_TYPE_BIN_BLOCK, "VGhpcyBpcyBhIHRleHQgYmluYXJ5IGJsb2Nr"},
+    { "smc.ta.testidentity", TA_PROP_TYPE_ID, &(const TEE_Identity){0xF0000000, {0x534D4152, 0x542D, 0x4353, {0x4C, 0x54, 0x2D, 0x54, 0x41, 0x2D, 0x30, 0x31}}}},
+    { "smc.ta.testuuid", TA_PROP_TYPE_UUID, &(const TEE_UUID){0x534D4152, 0x542D, 0x4353, {0x4C, 0x54, 0x2D, 0x54, 0x41, 0x2D, 0x30, 0x31}}},
+    { "gpd.\t\n\r\0", TA_PROP_TYPE_BOOL, &(const bool){1}},
+};
+
+static const size_t ta_props_len = sizeof(tee_api_properties) / sizeof(tee_api_properties[0]);
+
+trusty_app_manifest_t TRUSTY_APP_MANIFEST_ATTRS trusty_app_manifest =
+{
+    TTA_TCF_UUID,
+
+    /* optional configuration options here */
+    {
+        TRUSTY_APP_CONFIG_MIN_HEAP_SIZE(32 * 1024),
+        TRUSTY_APP_CONFIG_MIN_STACK_SIZE(1 * 1024),
+
+        /* enable/disable auto start */
+        TRUSTY_APP_CONFIG_AUTO_START(0),
+
+        /* custom external config options */
+        TRUSTY_APP_CONFIG_EXTERN((uint32_t)&tee_api_properties, (uint32_t)&ta_props_len),
+    },
+};
diff -ruN TTA_TCF/TTA_TCF/rules.mk TTA_TCF_patched/TTA_TCF/rules.mk
--- TTA_TCF/rules.mk	1970-01-01 01:00:00.000000000 +0100
+++ TTA_TCF_patched/rules.mk	2017-11-07 18:00:23.188290089 +0100
@@ -0,0 +1,30 @@
+#
+# Copyright (c) 2016-218, MIPS Tech, LLC and/or its affiliated group companies (“MIPS”).
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+LOCAL_DIR := $(GET_LOCAL_DIR)
+
+MODULE := $(LOCAL_DIR)
+
+MODULE_SRCS += \
+	$(LOCAL_DIR)/code_files/manifest.c \
+	$(LOCAL_DIR)/code_files/TTA_TCF.c \
+
+MODULE_DEPS += \
+	app/trusty \
+	lib/libc-trusty \
+	lib/libutee \
+	xtest/TTAs_Internal_API_1_1_1/TEE_include \
+
+include make/module.mk
diff -ruN TTA_TCF/TTA_TCF/code_files/TTA_TCF.h TTA_TCF_patched/TTA_TCF/code_files/TTA_TCF.h
--- TTA_TCF/code_files/TTA_TCF.h	2016-01-14 11:23:55.000000000 +0100
+++ TTA_TCF_patched/code_files/TTA_TCF.h	2018-02-26 14:23:49.243178354 +0100
@@ -59,7 +59,7 @@
 bool areStringsIdenticalWithZeroTerminated(const char *string1, size_t length1, const char *zeroTerminatedString);
 bool areUUIDsIdentical(TEE_UUID *UUID1, TEE_UUID *UUID2);
 bool areIdentitiesIdentical(TEE_Identity *Identity1, TEE_Identity *Identity2);
-bool areBinaryBlocksIdentical(const char *BinaryBlock1, uint32_t nLength1, const char *BinaryBlock2, uint32_t nLength2);
+bool areBinaryBlocksIdentical(const char *BinaryBlock1, size_t nLength1, const char *BinaryBlock2, size_t nLength2);
 bool isPropertySet (TEE_PropSetHandle propsetOrEnumerator);
 void getUUIDFromBuffer(TEE_UUID *pTargetUUID, char uuidvalue[16]);
 enum propType getPropertyType(const char *propString, size_t propStringLength);
diff -ruN TTA_TCF/TTA_TCF/code_files/TTA_TCF.c TTA_TCF_patched/TTA_TCF/code_files/TTA_TCF.c
--- TTA_TCF/code_files/TTA_TCF.c	2016-01-14 11:23:55.000000000 +0100
+++ TTA_TCF_patched/code_files/TTA_TCF.c	2018-02-26 14:23:49.243178354 +0100
@@ -76,6 +76,7 @@
  *   Includes
  * ---------------------------------------------------------------------------- */
 #include "tee_internal_api.h"
+#include "tee_trace.h"
 #include "TTA_TCF.h"
 #include "TTA_TCF_common_protocol.h"
 
@@ -156,9 +157,9 @@
 
 bool isPropertySet (TEE_PropSetHandle propsetOrEnumerator)
 {
-	if((propsetOrEnumerator == TEE_PROPSET_CURRENT_TA)||
-			(propsetOrEnumerator == TEE_PROPSET_CURRENT_CLIENT)||
-			(propsetOrEnumerator == TEE_PROPSET_TEE_IMPLEMENTATION))
+	if(((uint32_t)propsetOrEnumerator == TEE_PROPSET_CURRENT_TA)||
+			((uint32_t)propsetOrEnumerator == TEE_PROPSET_CURRENT_CLIENT)||
+			((uint32_t)propsetOrEnumerator == TEE_PROPSET_TEE_IMPLEMENTATION))
 		return true; /** if a pseudo handle **/
 	else
 		return false; /** if an enumerator **/
@@ -382,11 +383,6 @@
 	nPropSet = (TEE_PropSetHandle)pParams[0].value.a;
 
 	pPropName = pParams[1].memref.buffer;
-	if (pPropName == NULL)
-	{
-		SLogError("CmdTEEGetPropertyAsBool_withoutEnum: property name Input parameter is NULL");
-		return TRUSTED_APP_ERROR_BAD_PARAMETERS;
-	}
 
 	/* if all input/output data are correct */
 	cmdResult = TEE_GetPropertyAsBool(nPropSet, pPropName, &nOutputBool);
